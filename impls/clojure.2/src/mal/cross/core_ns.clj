(defmacro make-core-ns [fs]
  `(map->Namespace
     {:name 'mal.core
      :bindings
        (atom
          ~(into {}
             (vec
               (map
                 #(let [fname (name %)]
                    [(list 'symbol fname) (symbol "mal.core" fname)])
                 fs))))}))

(def CORE-NS
  (make-core-ns
    [*
     +
     -
     /
     <
     <=
     =
     >
     >=
     apply
     assoc
     atom
     atom?
     boolean?
     butlast
     char?
     concat
     cons
     contains?
     count
     deref
     dissoc
     drop
     empty?
     even?
     first
     get
     hash-map
     hash-set
     identical?
     inc
     index-of
     instance?
     into
     join
     keys
     keyword
     keyword?
     last
     list
     list?
     map
     map?
     meta
     name
     namespace
     nth
     number?
     partition
     partition-by
     print
     reduce
     reduce-kv
     reset!
     rest
     reverse
     second
     seq
     seq?
     set?
     simple-symbol?
     slurp
     string?
     subs
     swap!
     symbol
     symbol?
     throw
     type
     vals
     vec
     vector
     vector?]))
